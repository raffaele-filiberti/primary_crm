// http://ionicframework.com/docs/v2/theming/


// App Global Sass
// --------------------------------------------------
// Put style rules here that you want to apply globally. These
// styles are for the entire app and not just one component.
// Additionally, this file can be also used as an entry point
// to import other Sass files to be included in the output CSS.
//
// Shared Sass variables, which can be used to adjust Ionic's
// default Sass variables, belong in "theme/variables.scss".
//
// To declare rules for a specific mode, create a child rule
// for the .md, .ios, or .wp mode classes. The mode class is
// automatically applied to the <body> element in the app.


.bar-button-md {
  margin-left: 0.8rem !important;
  margin-right: 0.8rem !important;
}
//}
//ion-menu .content-md {
//  background: #ffffff;
//}
//.content-md {
//  background: #fafafa;
//}
//.bar-button-md {
//  margin-left: 0.6rem;
//  margin-right: 0.6rem;
//}
//.list-md .item-block .item-inner {
//  border-bottom: none;
//}
//.item-md {
//  border-bottom: 1px solid #dedede;
//}
//ion-list ion-item-sliding:nth-of-type(1) .item-md {
//  border-top: 1px solid #dedede;
//}
//.list-md ion-item-options .button {
//  margin-top: 0;
//  margin-bottom: 0;
//  height:100%;
//}
//ion-item-sliding:last-child ion-item-options {
//  border-bottom: 0;
//}

//task segment
ion-toolbar.segment-bar.toolbar.toolbar-md {
  padding: 0;
  align-items: flex-end;
  min-height: 4.0rem;
}
.segment-md .segment-button.danger {
  background-color: map_get($colors, danger);
}
.segment-md .segment-button.warning {
  background-color: map_get($colors, warning);
}
.segment-md .segment-button.success {
  background-color: map_get($colors, success);
}
//end task segment

ion-note {
  font-size: 12px;
  align-self: flex-start;
  margin-top: 14px;
}

.thumbnail {
  height: 200px;
  position: relative;
  display: block;
  width: 100%;
  background: map_get($colors, primary);
}
.heading {
  position: absolute;
  bottom: 0;
  left: 2em;
  //font-size: 2em;
  //line-height: 2.2em;
  width: 100%;
  //font-weight: 700;
  color: #fff;
}
.card-header-md {
  font-weight: 600;
}

.drive-list {
  border: 1px solid #dedede;
}

.toolbar-background {
  background: map_get($colors, primary);
}

.item-md ion-icon[item-left], .item-md ion-icon[item-right], .item-md ion-icon[item-start], .item-md ion-icon[item-end] {
  margin-left: 8px;
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}


// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))
//    md
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  $n: index($breakpoint-names, $name);
  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}


// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.1.
//
//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    767px
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $next: breakpoint-next($name, $breakpoints);
  @return if($next, breakpoint-min($next, $breakpoints) - 1px, null);
}


// Creates text alignment classes based on screen size
// TODO this would be nice to add to the framework
@each $breakpoint in map-keys($grid-breakpoints) {
  $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

  @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
    // Provide text `[text-{bp}]` attributes for aligning text based on screen size
    [text#{$infix}-center] {
      text-align: center;
    }

    [text#{$infix}-left] {
      text-align: left;
    }

    [text#{$infix}-right] {
      text-align: right;
    }

    [hidden#{$infix}-up] {
      display: none;
    }
  }

  @include media-breakpoint-down($breakpoint, $grid-breakpoints) {
    [hidden#{$infix}-down] {
      display: none;
    }
  }
}


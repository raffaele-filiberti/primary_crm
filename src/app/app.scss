// http://ionicframework.com/docs/v2/theming/


// App Global Sass
// --------------------------------------------------
// Put style rules here that you want to apply globally. These
// styles are for the entire app and not just one component.
// Additionally, this file can be also used as an entry point
// to import other Sass files to be included in the output CSS.
//
// Shared Sass variables, which can be used to adjust Ionic's
// default Sass variables, belong in "theme/variables.scss".
//
// To declare rules for a specific mode, create a child rule
// for the .md, .ios, or .wp mode classes. The mode class is
// automatically applied to the <body> element in the app.
.scroll-content::-webkit-scrollbar {
  display: none;
}

.bar-button-md {
  margin-left: 0.8rem !important;
  margin-right: 0.8rem !important;
}

.item-md ion-icon[item-left] + .item-inner, .item-md ion-icon[item-left] + .item-input, .item-md ion-icon[item-start] + .item-inner, .item-md ion-icon[item-start] + .item-input {
  margin-left: 16px;
}

ion-toolbar.segment-bar.toolbar.toolbar-md {
  padding: 0;
  align-items: flex-end;
  min-height: 4.0rem;
}
.segment-md .segment-button.danger {
  background-color: map_get($colors, danger);
}
.segment-md .segment-button.warning {
  background-color: map_get($colors, warning);
}
.segment-md .segment-button.success {
  background-color: map_get($colors, success);
}
//end task segment

ion-note {
  font-size: 12px;
  align-self: flex-start;
  margin-top: 14px;
  &.note-md.date {
    margin-right: 16px;
    margin-top: 14.5px;
    margin-bottom: 14.5px;
  }
}

.success ion-label.label.label-md {
  border-left: 2px solid map_get($colors, success);
  padding-left: 16px;
}

.warning ion-label.label.label-md {
  border-left: 2px solid map_get($colors, warning);
  padding-left: 16px;
}

.danger ion-label.label.label-md {
  border-left: 2px solid map_get($colors, danger);
  padding-left: 16px;
}

.thumbnail {
  height: 150px;
  position: relative;
  display: block;
  width: 100%;
  background: map_get($colors, primary);

  & ion-avatar {
    min-width: 50px;
    min-height: 50px;
    line-height: 50px;
    color: map_get($colors, primary);
    background: #fff;
    font-size: 2.5rem;
  }

  .heading {
    position: absolute;
    bottom: 8px;
    width: 100%;
    color: #fff;

    & p {
      color: #eee
    }

    &.item-md {
      background: transparent;
    }
  }
}

#auth .list-header-md {
  margin: 10px 0 5px;
  border-top: 0;
}

ion-avatar {
  min-width: 40px;
  min-height: 40px;
  font-size: 1.5rem;
  text-align: center;
  line-height: 4rem;
  background: map_get($colors, primary);
  border-radius: 50%;
  font-weight: 600;
  color: #fff;
}
.card-header-md {
  font-weight: 600;
}

.drive-list {
  border: 1px solid #dedede;
}

.toolbar-background {
  background: map_get($colors, primary);
}

.item-md ion-icon[item-left], .item-md ion-icon[item-right], .item-md ion-icon[item-start], .item-md ion-icon[item-end] {
  margin-left: 8px;
}

.lines {
  border-left: 2px solid #03A9F4;
  padding-left: 16px;
}

.split-pane-md.split-pane-visible > .split-pane-side {
  min-width: 270px;
  max-width: 28%;
  /* border-right: 1px solid #dedede; */
  border-left: 0;
  box-shadow: 0 6px 10px 0 rgba(0, 0, 0, 0.14), 0 1px 18px 0 rgba(0, 0, 0, 0.12), 0 3px 5px -1px rgba(0, 0, 0, 0.3) !important;
  z-index: 80;
}

.split-pane-md.split-pane-visible > .split-pane-side {
  border-right: 0;
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}


// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))
//    md
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  $n: index($breakpoint-names, $name);
  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}


// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.1.
//
//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    767px
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $next: breakpoint-next($name, $breakpoints);
  @return if($next, breakpoint-min($next, $breakpoints) - 1px, null);
}


// Creates text alignment classes based on screen size
// TODO this would be nice to add to the framework
@each $breakpoint in map-keys($grid-breakpoints) {
  $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

  @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
    // Provide text `[text-{bp}]` attributes for aligning text based on screen size
    [text#{$infix}-center] {
      text-align: center;
    }

    [text#{$infix}-left] {
      text-align: left;
    }

    [text#{$infix}-right] {
      text-align: right;
    }

    [hidden#{$infix}-up] {
      display: none;
    }
  }

  @include media-breakpoint-down($breakpoint, $grid-breakpoints) {
    [hidden#{$infix}-down] {
      display: none;
    }
  }
}


